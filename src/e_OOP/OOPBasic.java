package e_OOP;

public class OOPBasic {
	public static void main(String[] args) {
		/*
		  OOP : Object-Oriented-Programming(객체 지향 프로그래밍)
		  
		  1. 객체지향언어
		  	- 기존의 프로그래밍 언어에 몇가지 새로운 규칙을 추가한 보다 발전된 형태
		  	- 객체지향언어의 특징: 코드의 재사용성이 높다
		  					: 코드의 관리가 용이하다.
		  					: 신뢰성이 높은 프로그래밍이 가능하게 한다.
		  
		  
		  2. 클래스와 객체
		  	1) 클래스란? 	: 객체를 정리해 놓은 것이다.
		    			: 객체의 설계도 또는 틀이다.
		  
		  		클래스	 	객체
		   		Tv설계도	 	Tv
		  
		  	2) 클래스의 선언 [접근제어자] [지정예약어] class 클래스명 [extends 클래스명] [implements 인터페이스명]
		  				public	  abstract  class Child  extends Parents  implements Serializable{}
		  
		  	3) 객체란?
		  		- 실제로 존재한 것, 사물 또는 개념 
		  		- 구성요소: 속성(맴버변수, 특성, 필드, 상태) width,  height, color, volume....
		  	 			: 기능(메서드, 행위, 함수) changeColor, volumeUp...
		  
		  
		  3. 인스턴스란?
		   - 클래스로부터 객체를 만드는 과정을 클래스의 인스턴스라고 한다.
		   - Tv클래스로부터 만들어진 객체를 Tv클래스의 인스턴스라고 한다.
		   - 인스턴스 생성 방법	: 클래스명 변수명 : --> 클래스의 객체를 참조하기 위한  참조변수를 선언한다.
		    				: 변수명 = new 클래스명(); --> 클래스의 객체를 생성 후, 객체의 주소를 참조변수에 저장한다.
		   - 인스턴스는 참조변수를 통해서만 갈 수 있으며, 참조변수의 타입은 인스턴스의 타입과 일치해야 한다.
		  
		  4. 선언위치에 따른 변수의 종류
		   - 전역변수(인스턴스변수, 클래스 변수), 지역변수
		   - 인스턴스 변수	: 클래스영역 내에 선언되며, 클래스의 인스턴스가 생성될때 메모리에 로드된다.
		    			: 인스턴스의 값을  읽어오거나 변경하기 위해서는 인스턴스를 먼저 생성해야 한다.
		    			: 인스턴스 변수는 독립적인 저장공간을 가지므로 서로 다른 값을 가질 수 있다.
		  
		  - 클래스 변수	: 클래스영역 내에 선언되며, 클래스가 메모리에 로드될 때 같이 로드된다.
		   				: 모든 인스턴스가 공통된  저장공간을 공유하게 된다.
		   				: 변수앞에 static을 붙이기만 하면된다.
		  
		  - 지역변수	: 메서드영역내에 선언되며, 메서드 내에서만 사용 가능하다.
		   			: 메서드 종료시 소멸되게 된다.
		   			: for,while, if 블럭 내에 선언된 지역변수는 해당 블럭 내에서만 사용가능하다.
		  
		  5. method
		  	- 어떠한 작업을 수행하기 위한 명령문의 집합
		  	- 주로 어떤 값을 입력받아서 처리하고 그 결과를 돌려준다. 
		  	- 입력받는 값이 없을 수도 있고, 돌려주는 결과가 없을 수도 있다. 입력받는 값, 돌려주는 값 모두 없을 수도 있다.
		  	- 반복적으로 사용되는 코드를 줄이기 위해서 사용한다.
		  	- 작성방법 반환타입 메서드명(변수타입 변수명,변수타입 변수명,.......){//매개변수 
		  			//수행될 코드
		  			   //return 변수 또는 값; }
		  
		  6. return문
		   - 메서드가 정상적으로 종료되는 경우	: 메서드의 블럭{}내의 마지막 문장까지 수행하였을 때
		    							: 메서드의 블럭{}내에서 return문을 만났을 때
		   - 반환값 : 반환값이 있는 경우 return 변수 또는 값; : 반환값이 없는 경우 return;(메서드의 마지막 라인에서는 생략가능)
		    										--> 반환타입에 void를 적어준다.
		    										
		    										
		  7. 매개변수
		  	- 메서드를 호출할 때 매개변수로 지정된 값을 메서드의 매개변수에 복사해서 넣어준다.
		  	- 기본형 매개변수
		  		: 단순히 지정된 값만을 복사한다.
		  		: 변수의 값을 읽기만 할 수 있다.
		  	- 참조형 매개변수
		  		: 인스턴스의 주소가 복사된다.
		  		: 변수의 값을 읽고 변경할 수 있다.
		  		
		  8. 메서드 오버로딩
		  	- 한 클래스 내에 같은 이름의 메서드를 여러 개 정의하는 것
		  		: println()			--------> println메서드를 살펴보면 println([타입][매개변수])로 되어 있다.  
		  	- 조건
		  		: 메서드 이름은 같아야 한다. 
		  		: 매개변수의 개수 또는 타입이 달라야 한다.
		  		: 반환타입은 상관이 없다.
		  	- 장점 
		  		: 메서드의 명으로만 구분을 한다면 메서드의 명이 모두 달라야 한다.
		  		: 근본적으로는 같은 기능을 하는 것인데 다른이름으로 표현되면 기억하기 어렵다. 
		  		: 메서드의 이름을 짓는데 고민을 덜 수 있다.
		  		
		  9. 재귀호출(Recursive call)
		  	- 메소드 내부에서 메서드 자기 자신을 다시 호출하는 것
		  	
		  10. 클래스 멤버와 인스턴스 멤버 간의 참조와 호출
		  	- 같은 클래스 멤버 간에는 객체생성이나 참조변수 없이 참조할 수 있다.
		  	- 클래스 멤버들은 인스턴스 멤버를 호출할 수 없다.
		  	
		  11. 생성자
		  	- 인스턴스가 생성될 때 호출되는 인스턴스 초기화 메서드이다.
		  	- 특징
		  		: 생성자의 명칭은 클래스 명과 동일 
		  		: return값이 없다.--> 생략가능
		  	- 정의방법
		  		: 기본생성자
		  			class명(){
		  			}
		  		: 매개변수가 있는 생성자
		  			class명(변수타입, 변수명......){
		  			}
		  			
		  12. 초기화 블럭
		  	- 변수를 초기화 하는 방법은 여러가지가 있다.
		  	- 명시적 초기화(int a = 5) : 선언함과 동시에 값을 지정
		  	- 생성자를 이용한 초기화
		  	- 초기화 블럭을 이용한 초기화
		  	
		  13. 객체배열
		 */
	}
}
